def baseDir = "/Users/gongleilei/Desktop/OnePeasToDo"
def isUnSingleModule = "${getProjectDir()}" == "${baseDir}/app" || "${getProjectDir()}" == "${baseDir}/Sample"
//如果是Base模块，不做处理
def isFilter = "${getProjectDir()}" == "/Users/gongleilei/Desktop/OnePeasToDo/Base"

if ((rootProject.singleModule || isUnSingleModule) && !isFilter) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
def isAppPlugin = project.plugins.hasPlugin('com.android.application')

apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-kapt"//kotlin语言使用注入框架，dataBinding都需要这个
apply plugin: "kotlin-parcelize"
apply plugin: "dagger.hilt.android.plugin"
apply plugin: "androidx.navigation.safeargs.kotlin"//用于navigation传参的时候一种安全防护,非空，类型判断等。

println "${getProjectDir()}-----isAppPlugin=${isAppPlugin}-----isUnSingleModule=${isUnSingleModule}-----isFilter=${isFilter}"

task generateSources(type: Task) {
    def deleteOutputDir = file("${getProjectDir()}/src/main/java/pub/gll/onepeas/todo/MyApp.kt")
    println "----------11111-------------"
    def outputDir = file("${getProjectDir()}/src/main/java/pub/gll/onepeas/todo")
    println "----------22222-------------"
    outputs.dir outputDir
    println "----------33333-------------"

    println "----------deleteOutputDir=${deleteOutputDir}----------"
    if (deleteOutputDir.exists()) {
        println "----------deleteOutputDir-------------"
        deleteOutputDir.delete()
    }

    doFirst {
        if (isAppPlugin) {
            outputDir.exists() || outputDir.mkdirs()
            new File(outputDir, "MyApp.kt").write("package pub.gll.onepeas.todo\n" +
                    "\n" +
                    "import dagger.hilt.android.HiltAndroidApp\n" +
                    "import pub.gll.onepeas.libbase.BaseApp\n" +
                    "@HiltAndroidApp\n" +
                    "open class MyApp : BaseApp() {}")

        }
    }
}
afterEvaluate {
    //如果是单独运行的需要动态添加MyApp
    //1、找到需要的构建流程 Task
    def mergeDebugResources = tasks.findByName("preBuild")
    //2、通过 dependsOn 指定
    mergeDebugResources.dependsOn(generateSources)
}
android {
    compileSdk rootProject.compile_sdk

    defaultConfig {
        minSdk rootProject.min_sdk
        targetSdk rootProject.target_sdk

        vectorDrawables {
            useSupportLibrary true
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //kotlin ARouter 的配置方式
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
                arg("room.schemaLocation": "$projectDir/schemas".toString())

            }
        }

        ndk {
            //设置支持的SO库架构  armeabi-v7a：对于浮点运算的cpu性能更好、android 2.2开始支持V7a，所以置顶v7a兼容包，其余兼容包过滤，主要解决依赖库问题
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    signingConfigs {
        debug {
            storeFile file("${rootDir}/kk_comic_google.jks")
            storePassword "kk_comic123456"
            keyAlias "kk_comic_google"
            keyPassword "kk_comic123456"
        }

        release {
            storeFile file("${rootDir}/kk_comic_google.jks")
            storePassword "kk_comic123456"
            keyAlias "kk_comic_google"
            keyPassword "kk_comic123456"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
//            if (rootProject.singleModule) {
//                //独立运行
//                manifest.srcFile 'src/main/single/AndroidManifest.xml'
//            } else {
//                //合并到宿主
//                manifest.srcFile 'src/main/AndroidManifest.xml'
//                resources {
//                    //正式版本时，排除alone文件夹下所有调试文件
//                    exclude 'src/main/single/*'
//                }
//            }
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //使用jetPack的组件，会要求jdk 1.8最好，有的时候会遇到报错，需要配置如下，避免target jvm 1.8的那个报错
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn",]
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.2.0-rc01'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        compose true
        dataBinding = true
        viewBinding = true
    }
    if (isAppPlugin) {
        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def processorTask = output.processManifestProvider.getOrNull()
                println "=====processorTask=====$processorTask"
                processorTask.doLast { task ->
                    def vn
                    if (variant.getFlavorName() != null && variant.getFlavorName() != "") {
                        vn = variant.name.capitalize()
                    } else {
                        if (variant.getBuildType().name == "release") {
                            vn = "Release"
                        } else {
                            vn = "Debug"
                        }
                    }
                    def taskName = "process${vn}MainManifest"
                    try {
                        println("=============== taskName ${taskName} ===============")
                        project.getTasks().getByName(taskName)
                    } catch (Exception e) {
                        println(".....................Exception......................")
                        e.printStackTrace()
                        return
                    }
                    println(".....................11111......................")
                    def festmaniOutFile = new File(multiApkManifestOutputDirectory.get().getAsFile(), "AndroidManifest.xml")
                    println(".....................festmaniOutFile=${festmaniOutFile}......................")
                    def festmaniXml = new groovy.xml.XmlParser(false, false).parseText(festmaniOutFile.getText("UTF-8"))
                    def nameTag = "android:name"
                    def exportedTag = "android:exported"
                    if (festmaniXml.application[0].attributes().get(nameTag) == null) {
                        festmaniXml.application[0].attributes().put(nameTag, "pub.gll.onepeas.todo.MyApp")
                    }
                    def nodes = festmaniXml.application[0].'*'.findAll {
                        it.name() == 'activity' && it.attribute(exportedTag) == null
                    }
                    println(".....................nodes=${nodes}......................")
                    def activity = nodes[0]
                    activity.attributes().put("android:exported", true)
                    def intentFilter = activity.appendNode("intent-filter")
                    def action = intentFilter.appendNode("action")
                    def category = intentFilter.appendNode("category")
                    action.attributes().put(nameTag, "android.intent.action.MAIN")
                    category.attributes().put(nameTag, "android.intent.category.LAUNCHER")


                    festmaniXml.application[0].attributes().each {
                        println(".....................${it}......................")
                    }

                    def serialize = groovy.xml.XmlUtil.serialize(festmaniXml)
                    festmaniOutFile.write(serialize, 'UTF-8')
//                outputFileName = "GLL_" + buildType.name + "_${variant.versionName}.apk"
                }
            }
        }
    }
}

kapt {
    correctErrorTypes true
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.fragment:fragment-ktx:1.5.5'
    implementation 'androidx.activity:activity-ktx:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation 'com.google.android:flexbox:2.0.1'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'androidx.preference:preference:1.2.0'
    //endregion

    // okHttp
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.3'
    implementation 'com.squareup.okio:okio:3.0.0'

    // koin 为依赖注入库 考虑使用中 或许可以用Hilt代替
    // Koin for Kotlin
    def koin_version = "2.1.6"
    implementation "org.koin:koin-core:$koin_version"
    implementation "org.koin:koin-core-ext:$koin_version"

    // Koin for AndroidX
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
    implementation "org.koin:koin-androidx-fragment:$koin_version"
    implementation "org.koin:koin-androidx-ext:$koin_version"

    testImplementation "org.koin:koin-test:$koin_version"
    //endregion

    //region jetPack libs

    implementation "androidx.startup:startup-runtime:1.1.1"

    def lifeVersion = '2.4.1'
    implementation 'com.kunminx.archi:unpeek-livedata:4.4.1-beta1'
    implementation "androidx.lifecycle:lifecycle-livedata:$lifeVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifeVersion"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifeVersion"

    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifeVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifeVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifeVersion"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    kapt "androidx.lifecycle:lifecycle-common-java8:$lifeVersion"


    def roomVersion = '2.4.2'
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-common:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
//    implementation "androidx.room:room-paging:2.5.0-alpha02"
    implementation "androidx.room:room-paging:$roomVersion"

    def workVersion = '2.7.1'
    implementation "androidx.work:work-runtime:$workVersion"
    implementation "androidx.work:work-runtime-ktx:$workVersion"
    def navigation_version = "2.4.1"
    //注意配置navigation版本号的时候，project下的build.gradle的class path也需要同步navigation的版本号配置
    implementation "androidx.navigation:navigation-ui:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-fragment:$navigation_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-runtime:$navigation_version"
    //endregion

    //ARouter
    def aRouterVersion = '1.5.1'
    implementation "com.alibaba:arouter-api:$aRouterVersion"
    kapt "com.alibaba:arouter-compiler:$aRouterVersion"

    //liveData eventBus
    implementation 'com.jeremyliao:live-event-bus-x:1.7.3'
    // If you want to use the GPU Filters
    implementation 'jp.co.cyberagent.android:gpuimage:2.1.0'

    // 键盘切换定制框架 https://github.com/YummyLau/PanelSwitchHelper
    implementation 'com.effective.android:panelSwitchHelper-androidx:1.3.12'

    //牛逼的弹框库 我感觉有它就够了 https://github.com/li-xiaojun/XPopup
    implementation 'com.lxj:xpopup:2.2.23'
    //region test libs
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:core-ktx:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    //endregion

    // 权限请求框架
//    implementation 'com.hjq:xxpermissions:9.5'
//    implementation 'com.permissionx.guolindev:permissionx:1.4.0'

    def ktx_version = "1.7.0"
    implementation "androidx.core:core-ktx:$ktx_version"

    def compose_version = "1.1.1"
    implementation "androidx.compose.ui:ui:$compose_version"

    def material3_version = "1.0.0-alpha08"
    implementation "androidx.compose.material3:material3:$material3_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"


    def lifecycle_version = "2.4.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"


    implementation "androidx.compose.ui:ui:1.3.2"
    implementation "androidx.compose.ui:ui-tooling-preview:1.3.2"
    implementation "androidx.compose.material:material:1.3.1"
    implementation "androidx.compose.material:material-icons-extended:1.3.1"
    implementation "com.google.android.material:compose-theme-adapter:1.2.1"

    implementation "androidx.activity:activity-compose:1.6.1"
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.3.2'
    debugImplementation "androidx.compose.ui:ui-tooling:1.3.2"
    debugImplementation 'androidx.compose.ui:ui-test-manifest:1.3.2'
    implementation "com.google.accompanist:accompanist-swiperefresh:0.18.0"

    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.3'

    //lifecycle
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    // viewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    // liveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"
//    api 'com.kunminx.archi:unpeek-livedata:4.4.1-beta1'
    //navigation
    implementation 'androidx.navigation:navigation-runtime-ktx:2.5.3'
    //retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"


    //hilt inject framework
    implementation "com.google.dagger:hilt-android:2.42"
    kapt "com.google.dagger:hilt-compiler:2.43.2"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    kapt "androidx.hilt:hilt-compiler:1.0.0"

    //http request
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.google.code.gson:gson:2.9.1"

    //数据保存，用于cookie持久化
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "androidx.datastore:datastore-core:1.0.0"
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.7.0'

    //paging分页库
    implementation "androidx.paging:paging-runtime-ktx:3.1.1"
    testImplementation "androidx.paging:paging-common-ktx:3.1.1"
    implementation "androidx.paging:paging-compose:1.0.0-alpha17"


    //约束布局
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"


    def accompanistVersion = "0.18.0"
    /** accompanist辅助插件 */
    implementation "com.google.accompanist:accompanist-insets:$accompanistVersion"
    implementation "com.google.accompanist:accompanist-coil:0.15.0"
    //系统ui控制器
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanistVersion"
    //glide
    implementation "com.google.accompanist:accompanist-glide:0.15.0"
    //viewPager
    implementation "com.google.accompanist:accompanist-pager:0.20.2"
    implementation "com.google.accompanist:accompanist-pager-indicators:$accompanistVersion"
    //下拉刷新
    implementation "com.google.accompanist:accompanist-swiperefresh:$accompanistVersion"
    //流式布局
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanistVersion"
    //placeholder
    implementation "com.google.accompanist:accompanist-placeholder-material:$accompanistVersion"
    //启动页
    implementation 'androidx.core:core-splashscreen:1.0.0'
    //桌面小组件
    implementation "androidx.glance:glance:1.0.0-alpha05"
    implementation 'androidx.glance:glance-appwidget:1.0.0-alpha05'

    implementation 'com.tencent.tbs:tbssdk:44199'

    implementation "com.github.bumptech.glide:glide:4.12.0"
    kapt 'com.github.bumptech.glide:compiler:4.13.2'

    implementation 'io.coil-kt:coil-video:2.1.0'
    implementation 'io.coil-kt:coil-compose:2.1.0'
    implementation 'io.coil-kt:coil-svg:2.2.1'
}
