pluginManagement {
    repositories {
        gradlePluginPortal()

        google()
        mavenCentral()
//        maven { url "https://maven.google.com" }
        maven { url "https://jitpack.io" }
        // 添加阿里云 maven 地址
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }

        // 华为开源镜像：https://mirrors.huaweicloud.com
        maven { url 'https://repo.huaweicloud.com/repository/maven' }
        maven { url 'https://developer.huawei.com/repo/'}

//        maven {
//            allowInsecureProtocol = true
//            url 'http://gll.pub:9081/repository/maven-public/'
//        }
        //友盟统计
        maven { url 'https://dl.bintray.com/umsdk/release' }
        maven { url "https://dl.bintray.com/thelasterstar/maven/" }

        maven { url 'https://repo1.maven.org/maven2/' }
        maven { url "https://repo.baichuan-android.taobao.com/content/groups/BaichuanRepositories/" }

        maven { url 'https://artifact.bytedance.com/repository/pangle'}

    }
}


dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {

        google()
        mavenCentral()
//        maven { url "https://maven.google.com" }
        maven { url "https://jitpack.io" }
        // 添加阿里云 maven 地址
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }

        // 华为开源镜像：https://mirrors.huaweicloud.com
        maven { url 'https://repo.huaweicloud.com/repository/maven' }
        maven { url 'https://developer.huawei.com/repo/'}

//        maven {
//            allowInsecureProtocol = true
//            url 'http://gll.pub:9081/repository/maven-public/'
//        }
        //友盟统计
        maven { url 'https://dl.bintray.com/umsdk/release' }
        maven { url "https://dl.bintray.com/thelasterstar/maven/" }

        maven { url 'https://repo1.maven.org/maven2/' }
        maven { url "https://repo.baichuan-android.taobao.com/content/groups/BaichuanRepositories/" }

        maven { url 'https://artifact.bytedance.com/repository/pangle'}

    }
}
rootProject.name = "OnePeasToDo"
//壳工程
include ':app'
//基础模块
include ':Base'
//log模块
include ':Lib:LibLog'
//文件上传模块
include ':Lib:LibUpLoad'
//注解模块
include ':Annotation:LibAptAnnotation'
//注解处理器模块
include ':Annotation:LibAptProcessor'
//算法模块
include ':Algorithm'
//示例模块
include ':Sample'
//Gradle模块
include ':buildSrcPlugin'

/****************  业务模块  **************/
include ':Module:ModuleHome'
include ':Module:ModuleMine'
include ':Module:ModuleCookbook'
include ':Module:ModuleEsp8266'
include ':Module:ModuleAccount'
include ':Module:ModuleWidget'
include ':Module:ModuleCar'
include ':Module:ModuleComic'
include ':Module:ModuleVideo'
/****************  业务模块  **************/














////================================== 打印 Gradle 构建各个阶段及各个任务的耗时 start ========================================
////初始化阶段开始时间
//long beginOfSetting = System.currentTimeMillis()
////配置阶段开始时间
//def beginOfConfig
////配置阶段是否开始了，只执行一次
//def configHasBegin = false
////存放每个 build.gradle 执行之前的时间
//def beginOfProjectConfig = new HashMap()
////执行阶段开始时间
//def beginOfTaskExecute
////初始化阶段执行完毕
//gradle.projectsLoaded {
//    println "初始化总耗时 ${System.currentTimeMillis() - beginOfSetting} ms"
//}
//
////build.gradle 执行前
//gradle.beforeProject {Project project ->
//    if(!configHasBegin){
//        configHasBegin = true
//        beginOfConfig = System.currentTimeMillis()
//    }
//    beginOfProjectConfig.put(project,System.currentTimeMillis())
//}
//
////build.gradle 执行后
//gradle.afterProject {Project project ->
//    def begin = beginOfProjectConfig.get(project)
//    println "配置阶段，$project 耗时：${System.currentTimeMillis() - begin} ms"
//}
//
////配置阶段完毕
//gradle.taskGraph.whenReady {
//    println "配置阶段总耗时：${System.currentTimeMillis() - beginOfConfig} ms"
//    beginOfTaskExecute = System.currentTimeMillis()
//}
//
////执行阶段
//gradle.taskGraph.beforeTask {Task task ->
//    task.doFirst {
//        task.ext.beginOfTask = System.currentTimeMillis()
//    }
//
//    task.doLast {
//        println "执行阶段，$task 耗时：${System.currentTimeMillis() - task.ext.beginOfTask} ms"
//    }
//}
//
////执行阶段完毕
//gradle.buildFinished {
//    println "执行阶段总耗时：${System.currentTimeMillis() - beginOfTaskExecute}"
//}
////================================== 打印 Gradle 构建各个阶段及各个任务的耗时 end ========================================
include ':customtransformplugin'
