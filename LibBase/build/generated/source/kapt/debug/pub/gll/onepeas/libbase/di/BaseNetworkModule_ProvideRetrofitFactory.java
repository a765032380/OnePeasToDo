// Generated by Dagger (https://dagger.dev).
package pub.gll.onepeas.libbase.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.CallAdapter;
import retrofit2.Converter;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("javax.inject.Named")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BaseNetworkModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final BaseNetworkModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<Converter.Factory> converterFactoryProvider;

  private final Provider<CallAdapter.Factory> callAdapterFactoryProvider;

  private final Provider<String> baseUrlProvider;

  public BaseNetworkModule_ProvideRetrofitFactory(BaseNetworkModule module,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<Converter.Factory> converterFactoryProvider,
      Provider<CallAdapter.Factory> callAdapterFactoryProvider, Provider<String> baseUrlProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
    this.converterFactoryProvider = converterFactoryProvider;
    this.callAdapterFactoryProvider = callAdapterFactoryProvider;
    this.baseUrlProvider = baseUrlProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(module, okHttpClientProvider.get(), converterFactoryProvider.get(), callAdapterFactoryProvider.get(), baseUrlProvider.get());
  }

  public static BaseNetworkModule_ProvideRetrofitFactory create(BaseNetworkModule module,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<Converter.Factory> converterFactoryProvider,
      Provider<CallAdapter.Factory> callAdapterFactoryProvider, Provider<String> baseUrlProvider) {
    return new BaseNetworkModule_ProvideRetrofitFactory(module, okHttpClientProvider, converterFactoryProvider, callAdapterFactoryProvider, baseUrlProvider);
  }

  public static Retrofit provideRetrofit(BaseNetworkModule instance, OkHttpClient okHttpClient,
      Converter.Factory converterFactory, CallAdapter.Factory callAdapterFactory, String baseUrl) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofit(okHttpClient, converterFactory, callAdapterFactory, baseUrl));
  }
}
