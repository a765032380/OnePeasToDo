// Generated by Dagger (https://dagger.dev).
package pub.gll.modulevideo.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import pub.gll.modulevideo.db.VideoAppDatabase;
import pub.gll.modulevideo.remote.VideoService;
import pub.gll.modulevideo.repository.VideoRepository;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class VideoRepositoryModule_ProvideCookbookRepositoryFactory implements Factory<VideoRepository> {
  private final VideoRepositoryModule module;

  private final Provider<VideoService> apiProvider;

  private final Provider<VideoAppDatabase> appDatabaseProvider;

  public VideoRepositoryModule_ProvideCookbookRepositoryFactory(VideoRepositoryModule module,
      Provider<VideoService> apiProvider, Provider<VideoAppDatabase> appDatabaseProvider) {
    this.module = module;
    this.apiProvider = apiProvider;
    this.appDatabaseProvider = appDatabaseProvider;
  }

  @Override
  public VideoRepository get() {
    return provideCookbookRepository(module, apiProvider.get(), appDatabaseProvider.get());
  }

  public static VideoRepositoryModule_ProvideCookbookRepositoryFactory create(
      VideoRepositoryModule module, Provider<VideoService> apiProvider,
      Provider<VideoAppDatabase> appDatabaseProvider) {
    return new VideoRepositoryModule_ProvideCookbookRepositoryFactory(module, apiProvider, appDatabaseProvider);
  }

  public static VideoRepository provideCookbookRepository(VideoRepositoryModule instance,
      VideoService api, VideoAppDatabase appDatabase) {
    return Preconditions.checkNotNullFromProvides(instance.provideCookbookRepository(api, appDatabase));
  }
}
