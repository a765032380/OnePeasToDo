apply plugin: 'com.alibaba.arouter'
apply plugin: 'koin'


buildscript {
    //获取local.properties属性
    Properties properties = new Properties()
    properties.load(getProject().rootProject.file("local.properties").newDataInputStream())
    if (properties.getProperty("isModularize") == null) {
        throw Exception("请在local.properties配置isModularize")
    }
    def isModularize = properties.getProperty("isModularize").toBoolean()
    ext {
        singleModule = isModularize

        compile_sdk = 33
        min_sdk = 24
        target_sdk = 33
        version_code = 1
        version_name = "1.0"
        compose_version = '1.2.0-beta01'

    }

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url "https://jitpack.io" }
        // 添加阿里云 maven 地址
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }

        // 华为开源镜像：https://mirrors.huaweicloud.com
        maven { url 'https://repo.huaweicloud.com/repository/maven' }
        maven { url 'https://developer.huawei.com/repo/' }

        //友盟统计
        maven { url 'https://dl.bintray.com/umsdk/release' }
        maven { url "https://dl.bintray.com/thelasterstar/maven/" }

        maven { url 'https://repo1.maven.org/maven2/' }
        maven { url "https://repo.baichuan-android.taobao.com/content/groups/BaichuanRepositories/" }

        maven { url 'https://artifact.bytedance.com/repository/pangle' }
        maven {
            url('repo')
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10"
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.42'
        classpath 'androidx.navigation:navigation-safe-args-gradle-plugin:2.5.3'
        //解决组件化引入aar
        classpath 'com.kezong:fat-aar:1.2.12'
        //koin注入框架
        classpath "org.koin:koin-gradle-plugin:2.2.0-rc-3"
        //阿里 A_router
        classpath "com.alibaba:arouter-register:1.0.2"

        //查看 Task 关系图插件依赖
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.5"
        //上传 JitPack 插件依赖
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'

        //引入插件依赖
        //classpath 'com.dream:customplugin:1.0.2'

        //引入插件依赖
//        classpath 'com.dream:xmlviewscanplugin:1.0.3'

        //Github 创建的 release: 1.0.0, 1.0.1, 1.0.4 是通过 com.github.dcendents.android-maven 插件上传的
        //引入插件依赖
//        classpath 'com.github.sweetying520:GradleDemo:1.0.4'

        //Github 创建的 release: 1.0.2, 1.0.3 是通过 maven-publish 插件上传的
        //引入插件依赖 使用 maven-publish 插件上传 JitPack 获取的依赖地址，特别长
        //implementation 'com.github.sweetying520.GradleDemo:CustomPlugin.gradle.plugin:1.0.3'
//        classpath "com.dream:customtransformplugin:1.0.0"
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//======================================= Project 常用 API start=====================================
/**
 * 5、获取当前 Project 及其子 Project 对象，返回值是一个 Set 集合
 */
//println getAllprojects()

//闭包形式
//allprojects {
//    println it
//}

/**
 * 6、获取当前 Project 下的所有子 Project 对象，返回值是一个 Set 集合
 */
//println getSubprojects()

//闭包形式
//subprojects {
//    println it
//}

/**
 * 9、指定工程实例，然后在闭包中对其进行相关的配置
 */
//project("app") {
//    apply plugin: 'com.android.application'
//}
//======================================= Project 常用 API end=====================================

//======================================= 扩展属性定义 start============================================
//方式1：ext.属性名
//ext.test = 'erdai666'

//方式2：ext 后面接上一个闭包
//ext{
//    test1 = 'erdai777'
//}
//======================================= 扩展属性定义 end============================================